// Generated by gencpp from file sensors/RegistrationServiceRequest.msg
// DO NOT EDIT!


#ifndef SENSORS_MESSAGE_REGISTRATIONSERVICEREQUEST_H
#define SENSORS_MESSAGE_REGISTRATIONSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensors
{
template <class ContainerAllocator>
struct RegistrationServiceRequest_
{
  typedef RegistrationServiceRequest_<ContainerAllocator> Type;

  RegistrationServiceRequest_()
    : platform_name()
    , sensor_type()  {
    }
  RegistrationServiceRequest_(const ContainerAllocator& _alloc)
    : platform_name(_alloc)
    , sensor_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _platform_name_type;
  _platform_name_type platform_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensor_type_type;
  _sensor_type_type sensor_type;


    static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CAMERA;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ANALOG;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DIGITAL;
 

  typedef boost::shared_ptr< ::sensors::RegistrationServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensors::RegistrationServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RegistrationServiceRequest_

typedef ::sensors::RegistrationServiceRequest_<std::allocator<void> > RegistrationServiceRequest;

typedef boost::shared_ptr< ::sensors::RegistrationServiceRequest > RegistrationServiceRequestPtr;
typedef boost::shared_ptr< ::sensors::RegistrationServiceRequest const> RegistrationServiceRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RegistrationServiceRequest_<ContainerAllocator>::CAMERA =
        
          "CAMERA"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RegistrationServiceRequest_<ContainerAllocator>::ANALOG =
        
          "ANALOG"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RegistrationServiceRequest_<ContainerAllocator>::DIGITAL =
        
          "DIGITAL"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensors::RegistrationServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors::RegistrationServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::RegistrationServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::RegistrationServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba03e6be1518decf9b0a19989136c24d";
  }

  static const char* value(const ::sensors::RegistrationServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba03e6be1518decfULL;
  static const uint64_t static_value2 = 0x9b0a19989136c24dULL;
};

template<class ContainerAllocator>
struct DataType< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensors/RegistrationServiceRequest";
  }

  static const char* value(const ::sensors::RegistrationServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string CAMERA=CAMERA\n\
string ANALOG=ANALOG\n\
string DIGITAL=DIGITAL\n\
\n\
\n\
string platform_name\n\
string sensor_type\n\
";
  }

  static const char* value(const ::sensors::RegistrationServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.platform_name);
      stream.next(m.sensor_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RegistrationServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensors::RegistrationServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensors::RegistrationServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "platform_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.platform_name);
    s << indent << "sensor_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSORS_MESSAGE_REGISTRATIONSERVICEREQUEST_H
